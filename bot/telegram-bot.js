const TelegramBot = require('node-telegram-bot-api');
const Web3Manager = require('./web3Manager');
const UserManager = require('./userManager');
const config = require('./config');

class TelegramBotManager {
  constructor() {
    this.bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { polling: true });
    this.web3Manager = new Web3Manager();
    this.userManager = new UserManager();
    this.setupCommands();
  }

  setupBotMenu() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    const commands = [
      { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'home', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'menu', description: 'üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥' },
      { command: 'register', description: 'üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á)' },
      { command: 'deploy', description: 'üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' },
      { command: 'addtoken', description: 'ü™ô –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω' },
      { command: 'tokens', description: 'üìù –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤' },
      { command: 'positions', description: 'üìä –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏' },
      { command: 'zapin', description: 'üí∞ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã' },
      { command: 'exit', description: 'üîÑ –ü—Ä–æ–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏' },
      { command: 'balance', description: 'üí∞ –ë–∞–ª–∞–Ω—Å—ã' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' },
      { command: 'status', description: 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞' }
    ];

    this.bot.setMyCommands(commands).then(() => {
      console.log('‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥:', error);
    });
  }

  setupCommands() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    this.setupBotMenu();
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const welcomeMessage = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MultiZap Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å zap-in –∏ exit –æ–ø–µ—Ä–∞—Ü–∏–∏

üìã **–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìã" —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥!

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/menu - –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
/home - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)
/deploy - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å MultiZap –∫–æ–Ω—Ç—Ä–∞–∫—Ç

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏:**
/addtoken - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
/tokens - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
/positions - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π

**–û–ø–µ—Ä–∞—Ü–∏–∏:**
/zapin - –í—ã–ø–æ–ª–Ω–∏—Ç—å zap-in –æ–ø–µ—Ä–∞—Ü–∏—é
/exit - –í—ã–ø–æ–ª–Ω–∏—Ç—å exit-and-sell –æ–ø–µ—Ä–∞—Ü–∏—é
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!
      `;
      this.bot.sendMessage(chatId, welcomeMessage);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /home - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    this.bot.onText(/\/home/, (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      let message = 'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MultiZap Bot**\n\n';
      
      if (user && user.contractAddress) {
        message += `‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç: \`${user.contractAddress.slice(0, 6)}...${user.contractAddress.slice(-4)}\`\n\n`;
      } else {
        message += `‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç\n\n`;
      }
      
      message += 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const homeKeyboard = {
        inline_keyboard: [
          [
            { text: 'üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'home_register' },
            { text: 'üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç', callback_data: 'home_deploy' }
          ],
          [
            { text: 'ü™ô –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', callback_data: 'home_addtoken' },
            { text: 'üìä –ü–æ–∑–∏—Ü–∏–∏', callback_data: 'home_positions' }
          ],
          [
            { text: 'üí∞ Zap-in', callback_data: 'home_zapin' },
            { text: 'üí∏ Exit & Sell', callback_data: 'home_exit' }
          ],
          [
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å—ã', callback_data: 'home_balance' },
            { text: 'üìù –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤', callback_data: 'home_tokens' }
          ],
          [
            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'home_help' }
          ]
        ]
      };
      
      this.bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: homeKeyboard
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /register
    this.bot.onText(/\/register/, (msg) => {
      const chatId = msg.chat.id;
      this.bot.sendMessage(chatId, 
        'üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n' +
        '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.'
      );
      
      this.bot.once('message', (msg) => {
        let privateKey = msg.text.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å 0x –∏–ª–∏ –±–µ–∑)
        if (privateKey && (
          (privateKey.startsWith('0x') && privateKey.length === 66) || 
          (!privateKey.startsWith('0x') && privateKey.length === 64)
        )) {
          // –î–æ–±–∞–≤–ª—è–µ–º 0x –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          if (!privateKey.startsWith('0x')) {
            privateKey = '0x' + privateKey;
          }
          
          const success = this.userManager.addUser(chatId, privateKey);
          if (success) {
            this.bot.sendMessage(chatId, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /deploy');
          } else {
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          }
        } else {
          this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –í–≤–µ–¥–∏—Ç–µ 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–ª—é—á (—Å 0x –∏–ª–∏ –±–µ–∑).');
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /deploy
    this.bot.onText(/\/deploy/, async (msg) => {
      const chatId = msg.chat.id;
      let user = this.userManager.getUser(chatId);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ config
      if (!user) {
        if (config.PRIVATE_KEY && config.PRIVATE_KEY !== 'your_private_key_here') {
          this.bot.sendMessage(chatId, '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register');
          user = { privateKey: config.PRIVATE_KEY };
        } else {
          this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ config.js');
          return;
        }
      }

      try {
        this.bot.sendMessage(chatId, '‚è≥ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
        
        this.web3Manager.setPrivateKey(user.privateKey);
        const contractAddress = await this.web3Manager.deployMultiZap();
        
        this.userManager.updateUserContract(chatId, contractAddress);
        
        this.bot.sendMessage(chatId, 
          `‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!\n\n` +
          `üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: \`${contractAddress}\`\n` +
          `üîó Etherscan: https://etherscan.io/address/${contractAddress}\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ${error.message}`);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /addtoken
    this.bot.onText(/\/addtoken/, (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      this.bot.sendMessage(chatId, 
        'ü™ô –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ LP:\n\n' +
        '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e`\n\n' +
        '–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π LP —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Uniswap Factory.',
        { parse_mode: 'Markdown' }
      );

      this.bot.once('message', async (msg) => {
        try {
          const tokenAddress = msg.text.trim();
          
          if (!tokenAddress || !tokenAddress.startsWith('0x') || tokenAddress.length !== 42) {
            this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /addtoken');
            return;
          }

          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          this.bot.sendMessage(chatId, 'üîç –ü–æ–∏—Å–∫ LP —Ç–æ–∫–µ–Ω–∞...');
          const txHash = await this.web3Manager.addTokenAuto(tokenAddress);
          
          this.bot.sendMessage(chatId, 
            `‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º LP!\n\n` +
            `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
            `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}\n\n` +
            `üìä –û—Ç–∫—Ä—ã–≤–∞—é –≤–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏...`,
            { parse_mode: 'Markdown' }
          );

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
          setTimeout(async () => {
            try {
              const tokens = await this.web3Manager.getAllTokens();
              
              if (tokens.length === 0) {
                this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—É—Å—Ç.');
                return;
              }

              let message = 'üìä –í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:\n\n';
              const keyboard = [];
              
              for (let i = 0; i < tokens.length; i++) {
                const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
                const shortAddress = `${tokens[i].slice(0, 6)}...${tokens[i].slice(-4)}`;
                const status = tokenInfo.isActive ? '‚úÖ' : '‚ùå';
                
                message += `${i + 1}. ${status} \`${shortAddress}\`\n`;
                
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                keyboard.push([{
                  text: `${i + 1}. ${shortAddress} ${status}`,
                  callback_data: `select_token_${tokens[i]}`
                }]);
              }

              const replyMarkup = {
                inline_keyboard: keyboard
              };

              this.bot.sendMessage(chatId, message + '\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π:', { 
                parse_mode: 'Markdown',
                reply_markup: replyMarkup
              });
            } catch (error) {
              this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
            }
          }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        } catch (error) {
          this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error.message}`);
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /zapin
    this.bot.onText(/\/zapin/, (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      this.bot.sendMessage(chatId, 
        'üí∞ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
        '`—Ç–æ–∫–µ–Ω_–∞–¥—Ä–µ—Å,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_ETH`\n\n' +
        '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e,0.01`',
        { parse_mode: 'Markdown' }
      );

      this.bot.once('message', async (msg) => {
        try {
          const [tokenAddress, amountStr] = msg.text.split(',').map(item => item.trim());
          const amount = parseFloat(amountStr);
          
          if (!tokenAddress || isNaN(amount) || amount <= 0) {
            this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /zapin');
            return;
          }

          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          const txHash = await this.web3Manager.zapIn(tokenAddress, amount);
          
          this.bot.sendMessage(chatId, 
            `‚úÖ Zap-in –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
            `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
            `üí∞ –°—É–º–º–∞: ${amount} ETH\n` +
            `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ zap-in: ${error.message}`);
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /exit
    this.bot.onText(/\/exit/, (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      this.bot.sendMessage(chatId, 
        'üîÑ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è exit-and-sell:\n\n' +
        '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e`',
        { parse_mode: 'Markdown' }
      );

      this.bot.once('message', async (msg) => {
        try {
          const tokenAddress = msg.text.trim();
          
          if (!tokenAddress) {
            this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /exit');
            return;
          }

          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          const txHash = await this.web3Manager.exitAndSell(tokenAddress);
          
          this.bot.sendMessage(chatId, 
            `‚úÖ Exit-and-sell –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
            `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
            `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ exit-and-sell: ${error.message}`);
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /balance
    this.bot.onText(/\/balance/, async (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      try {
        this.web3Manager.setPrivateKey(user.privateKey);
        this.web3Manager.setContractAddress(user.contractAddress);
        
        const walletBalance = await this.web3Manager.getWalletBalance();
        const contractEthBalance = await this.web3Manager.getEthBalance();
        const walletAddress = this.web3Manager.getWalletAddress();
        
        this.bot.sendMessage(chatId, 
          `üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n\n` +
          `üë§ –í–∞—à –∫–æ—à–µ–ª–µ–∫: \`${walletAddress}\`\n` +
          `üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletBalance} ETH\n` +
          `üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractEthBalance} ETH\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tokens –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ LP –±–∞–ª–∞–Ω—Å–æ–≤`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /positions - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    this.bot.onText(/\/positions/, async (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      try {
        this.web3Manager.setPrivateKey(user.privateKey);
        this.web3Manager.setContractAddress(user.contractAddress);
        
        const tokens = await this.web3Manager.getAllTokens();
        
        if (tokens.length === 0) {
          this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken');
          return;
        }

        let message = 'üìä –í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:\n\n';
        const keyboard = [];
        
        for (let i = 0; i < tokens.length; i++) {
          const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
          const shortAddress = `${tokens[i].slice(0, 6)}...${tokens[i].slice(-4)}`;
          const status = tokenInfo.isActive ? '‚úÖ' : '‚ùå';
          
          message += `${i + 1}. ${status} \`${shortAddress}\`\n`;
          
          // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
          keyboard.push([{
            text: `${i + 1}. ${shortAddress} ${status}`,
            callback_data: `select_token_${tokens[i]}`
          }]);
        }

        const replyMarkup = {
          inline_keyboard: keyboard
        };

        this.bot.sendMessage(chatId, message + '\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', { 
          parse_mode: 'Markdown',
          reply_markup: replyMarkup
        });
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /tokens
    this.bot.onText(/\/tokens/, async (msg) => {
      const chatId = msg.chat.id;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      try {
        this.web3Manager.setPrivateKey(user.privateKey);
        this.web3Manager.setContractAddress(user.contractAddress);
        
        const tokens = await this.web3Manager.getAllTokens();
        
        if (tokens.length === 0) {
          this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken');
          return;
        }

        let message = 'ü™ô –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:\n\n';
        
        for (let i = 0; i < tokens.length; i++) {
          const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
          const lpBalance = await this.web3Manager.getLpBalance(tokens[i]);
          const tokenBalance = await this.web3Manager.getTokenBalance(tokens[i]);
          
          message += `${i + 1}. –¢–æ–∫–µ–Ω: \`${tokens[i]}\`\n`;
          message += `   LP: \`${tokenInfo.lpToken}\`\n`;
          message += `   –°—Ç–∞—Ç—É—Å: ${tokenInfo.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
          message += `   LP –±–∞–ª–∞–Ω—Å: ${lpBalance}\n`;
          message += `   –¢–æ–∫–µ–Ω –±–∞–ª–∞–Ω—Å: ${tokenBalance}\n\n`;
        }
        
        this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /menu - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º
    this.bot.onText(/\/menu/, (msg) => {
      const chatId = msg.chat.id;
      const menuMessage = `
üìã **–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ MultiZap Bot**

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
üè† /home - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üîê /register - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á
üöÄ /deploy - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç

**–¢–æ–∫–µ–Ω—ã:**
ü™ô /addtoken - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
üìù /tokens - –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
üìä /positions - –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏

**–û–ø–µ—Ä–∞—Ü–∏–∏:**
üí∞ /zapin - –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
üîÑ /exit - –ü—Ä–æ–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
üí∞ /balance - –ë–∞–ª–∞–Ω—Å—ã

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚ùì /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
üìä /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìã" —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º!
      `;
      this.bot.sendMessage(chatId, menuMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      const helpMessage = `
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º MultiZap Bot:

üîê /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)
üöÄ /deploy - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å MultiZap –∫–æ–Ω—Ç—Ä–∞–∫—Ç
ü™ô /addtoken - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
üìä /positions - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π —Å –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–æ–π
üí∞ /zapin - –í—ã–ø–æ–ª–Ω–∏—Ç—å zap-in –æ–ø–µ—Ä–∞—Ü–∏—é
üîÑ /exit - –í—ã–ø–æ–ª–Ω–∏—Ç—å exit-and-sell –æ–ø–µ—Ä–∞—Ü–∏—é
üí∞ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã
üìù /tokens - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
üè† /home - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
   /register
   (–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)

2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:
   /deploy

3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:
   /addtoken
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞,–∞–¥—Ä–µ—Å_LP_—Ç–æ–∫–µ–Ω–∞)

4. Zap-in –æ–ø–µ—Ä–∞—Ü–∏—è:
   /zapin
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_ETH)

5. Exit –æ–ø–µ—Ä–∞—Ü–∏—è:
   /exit
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞)

‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      `;
      this.bot.sendMessage(chatId, helpMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      const user = this.userManager.getUser(chatId);
      
      if (!user || !user.contractAddress) {
        this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
        return;
      }

      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
        if (data.startsWith('select_token_')) {
          const tokenAddress = data.replace('select_token_', '');
          
          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
          const tokenInfo = await this.web3Manager.getTokenInfo(tokenAddress);
          const tokenPrice = await this.web3Manager.getTokenPrice(tokenAddress);
          const lpBalance = await this.web3Manager.getLpBalance(tokenAddress);
          const tokenBalance = await this.web3Manager.getTokenBalance(tokenAddress);
          
          const shortAddress = `${tokenAddress.slice(0, 6)}...${tokenAddress.slice(-4)}`;
          const status = tokenInfo.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç–∫–∞–ø
          const formatMarketCap = (marketCap) => {
            if (marketCap >= 1e9) return `$${(marketCap / 1e9).toFixed(2)}B`;
            if (marketCap >= 1e6) return `$${(marketCap / 1e6).toFixed(2)}M`;
            if (marketCap >= 1e3) return `$${(marketCap / 1e3).toFixed(2)}K`;
            return `$${marketCap.toFixed(2)}`;
          };
          
          const message = `ü™ô **${tokenPrice.name} (${tokenPrice.symbol})**\n\n` +
            `üìç –ê–¥—Ä–µ—Å: \`${shortAddress}\`\n` +
            `üí∞ –¶–µ–Ω–∞: ${tokenPrice.price.toFixed(8)} ETH ($${tokenPrice.priceUsd.toFixed(4)})\n` +
            `üìä –ú–∞—Ä–∫–µ—Ç–∫–∞–ø: ${formatMarketCap(tokenPrice.marketCap)}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n` +
            `üíé LP –±–∞–ª–∞–Ω—Å: ${lpBalance}\n` +
            `ü™ô –¢–æ–∫–µ–Ω –±–∞–ª–∞–Ω—Å: ${tokenBalance}\n` +
            `üìà ETH —Ü–µ–Ω–∞: $${tokenPrice.ethPrice.toFixed(2)}\n\n` +
            `üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
          const actionKeyboard = {
            inline_keyboard: [
              [
                { text: 'üí∞ –ö—É–ø–∏—Ç—å 0.01 ETH', callback_data: `buy_${tokenAddress}_0.01` },
                { text: 'üí∞ –ö—É–ø–∏—Ç—å 0.005 ETH', callback_data: `buy_${tokenAddress}_0.005` }
              ],
              [
                { text: 'üí∞ –ö—É–ø–∏—Ç—å 0.002 ETH', callback_data: `buy_${tokenAddress}_0.002` },
                { text: 'üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data: `custom_amount_${tokenAddress}` }
              ],
              [
                { text: 'üí∏ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ', callback_data: `sell_${tokenAddress}` }
              ],
              [
                { text: 'üìä –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `select_token_${tokenAddress}` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
              ]
            ]
          };
          
          await this.bot.editMessageText(message, {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: actionKeyboard
          });
          
          this.bot.answerCallbackQuery(callbackQuery.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
        else if (data.startsWith('buy_')) {
          const [, tokenAddress, amount] = data.split('_');
          const amountFloat = parseFloat(amount);
          
          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          const shortAddress = `${tokenAddress.slice(0, 6)}...${tokenAddress.slice(-4)}`;
          
          await this.bot.editMessageText(
            `‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ ${amount} ETH...\n\n` +
            `üìç –¢–æ–∫–µ–Ω: \`${shortAddress}\`\n` +
            `üí∞ –°—É–º–º–∞: ${amount} ETH`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              parse_mode: 'Markdown'
            }
          );
          
          const txHash = await this.web3Manager.zapIn(tokenAddress, amountFloat);
          
          await this.bot.editMessageText(
            `‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
            `üìç –¢–æ–∫–µ–Ω: \`${shortAddress}\`\n` +
            `üí∞ –°—É–º–º–∞: ${amount} ETH\n` +
            `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              parse_mode: 'Markdown'
            }
          );
          
          this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã
        else if (data.startsWith('custom_amount_')) {
          const tokenAddress = data.replace('custom_amount_', '');
          const shortAddress = `${tokenAddress.slice(0, 6)}...${tokenAddress.slice(-4)}`;
          
          await this.bot.editMessageText(
            `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ETH –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ \`${shortAddress}\`:\n\n` +
            `–ü—Ä–∏–º–µ—Ä: 0.05 –∏–ª–∏ 0.1`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              parse_mode: 'Markdown'
            }
          );
          
          // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã
          this.bot.once('message', async (msg) => {
            try {
              const customAmount = parseFloat(msg.text.trim());
              
              if (isNaN(customAmount) || customAmount <= 0) {
                this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /positions');
                return;
              }
              
              this.web3Manager.setPrivateKey(user.privateKey);
              this.web3Manager.setContractAddress(user.contractAddress);
              
              this.bot.sendMessage(chatId, `‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ ${customAmount} ETH...`);
              
              const txHash = await this.web3Manager.zapIn(tokenAddress, customAmount);
              
              this.bot.sendMessage(chatId, 
                `‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
                `üìç –¢–æ–∫–µ–Ω: \`${shortAddress}\`\n` +
                `üí∞ –°—É–º–º–∞: ${customAmount} ETH\n` +
                `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
                { parse_mode: 'Markdown' }
              );
            } catch (error) {
              this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error.message}`);
            }
          });
          
          this.bot.answerCallbackQuery(callbackQuery.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞
        else if (data.startsWith('sell_')) {
          const tokenAddress = data.replace('sell_', '');
          const shortAddress = `${tokenAddress.slice(0, 6)}...${tokenAddress.slice(-4)}`;
          
          this.web3Manager.setPrivateKey(user.privateKey);
          this.web3Manager.setContractAddress(user.contractAddress);
          
          await this.bot.editMessageText(
            `‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ \`${shortAddress}\`...\n\n` +
            `üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º LP —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ ETH`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              parse_mode: 'Markdown'
            }
          );
          
          try {
            const txHash = await this.web3Manager.exitAndSell(tokenAddress);
            
            await this.bot.editMessageText(
              `‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
              `üìç –¢–æ–∫–µ–Ω: \`${shortAddress}\`\n` +
              `üí∏ –í—Å–µ LP —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ETH\n` +
              `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}\n\n` +
              `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /positions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π`,
              {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                parse_mode: 'Markdown'
              }
            );
            
            this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
          } catch (error) {
            await this.bot.editMessageText(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: ${error.message}\n\n` +
              `üí° –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç LP —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏`,
              {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
              }
            );
            
            this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏');
          }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        else if (data.startsWith('home_')) {
          const action = data.replace('home_', '');
          
          switch (action) {
            case 'register':
              this.bot.sendMessage(chatId, 
                'üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n' +
                '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.'
              );
              
              this.bot.once('message', (msg) => {
                let privateKey = msg.text.trim();
                
                if (privateKey && (
                  (privateKey.startsWith('0x') && privateKey.length === 66) || 
                  (!privateKey.startsWith('0x') && privateKey.length === 64)
                )) {
                  if (!privateKey.startsWith('0x')) {
                    privateKey = '0x' + privateKey;
                  }
                  
                  const success = this.userManager.addUser(chatId, privateKey);
                  if (success) {
                    this.bot.sendMessage(chatId, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /deploy');
                  } else {
                    this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                  }
                } else {
                  this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –í–≤–µ–¥–∏—Ç–µ 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–ª—é—á (—Å 0x –∏–ª–∏ –±–µ–∑).');
                }
              });
              break;
              
            case 'deploy':
              this.bot.sendMessage(chatId, '‚è≥ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É deploy
              this.handleDeploy(chatId);
              break;
              
            case 'addtoken':
              this.bot.sendMessage(chatId, 
                'ü™ô –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ LP:\n\n' +
                '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e`\n\n' +
                '–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π LP —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Uniswap Factory.',
                { parse_mode: 'Markdown' }
              );
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É addtoken
              this.handleAddToken(chatId);
              break;
              
            case 'positions':
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É positions
              this.handlePositions(chatId);
              break;
              
            case 'zapin':
              this.bot.sendMessage(chatId, 
                'üí∞ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
                '`—Ç–æ–∫–µ–Ω_–∞–¥—Ä–µ—Å,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_ETH`\n\n' +
                '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e,0.01`',
                { parse_mode: 'Markdown' }
              );
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É zapin
              this.handleZapIn(chatId);
              break;
              
            case 'exit':
              this.bot.sendMessage(chatId, 
                'üîÑ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è exit-and-sell:\n\n' +
                '–ü—Ä–∏–º–µ—Ä: `0xA0b86a33E6441b8c4C8C0d4B0c8e8C8C0d4B0c8e`',
                { parse_mode: 'Markdown' }
              );
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É exit
              this.handleExit(chatId);
              break;
              
            case 'balance':
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É balance
              this.handleBalance(chatId);
              break;
              
            case 'tokens':
              // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É tokens
              this.handleTokens(chatId);
              break;
              
            case 'help':
              const helpMessage = `
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º MultiZap Bot:

üîê /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)
üöÄ /deploy - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å MultiZap –∫–æ–Ω—Ç—Ä–∞–∫—Ç
ü™ô /addtoken - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
üìä /positions - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π —Å –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–æ–π
üí∞ /zapin - –í—ã–ø–æ–ª–Ω–∏—Ç—å zap-in –æ–ø–µ—Ä–∞—Ü–∏—é
üîÑ /exit - –í—ã–ø–æ–ª–Ω–∏—Ç—å exit-and-sell –æ–ø–µ—Ä–∞—Ü–∏—é
üí∞ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã
üìù /tokens - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
üè† /home - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
   /register
   (–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)

2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:
   /deploy

3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:
   /addtoken
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞)

4. Zap-in –æ–ø–µ—Ä–∞—Ü–∏—è:
   /zapin
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_ETH)

5. Exit –æ–ø–µ—Ä–∞—Ü–∏—è:
   /exit
   (–≤–≤–µ–¥–∏—Ç–µ: –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞)

‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
              `;
              this.bot.sendMessage(chatId, helpMessage);
              break;
          }
          
          this.bot.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        else if (data === 'cancel') {
          await this.bot.editMessageText(
            '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /positions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π.',
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id
            }
          );
          
          this.bot.answerCallbackQuery(callbackQuery.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        }
        
      } catch (error) {
        this.bot.answerCallbackQuery(callbackQuery.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    });

    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ polling:', error);
    });

    console.log('ü§ñ MultiZap Bot –∑–∞–ø—É—â–µ–Ω!');
  }

  // –ú–µ—Ç–æ–¥—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  async handleDeploy(chatId) {
    let user = this.userManager.getUser(chatId);
    
    if (!user) {
      if (config.PRIVATE_KEY && config.PRIVATE_KEY !== 'your_private_key_here') {
        this.bot.sendMessage(chatId, '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register');
        user = { privateKey: config.PRIVATE_KEY };
      } else {
        this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ config.js');
        return;
      }
    }

    try {
      this.web3Manager.setPrivateKey(user.privateKey);
      const contractAddress = await this.web3Manager.deployMultiZap();
      
      this.userManager.updateUserContract(chatId, contractAddress);
      
      this.bot.sendMessage(chatId, 
        `‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!\n\n` +
        `üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: \`${contractAddress}\`\n` +
        `üîó Etherscan: https://etherscan.io/address/${contractAddress}\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }

  handleAddToken(chatId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞
    const user = this.userManager.getUser(chatId);
    if (!user || !user.contractAddress) {
      this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
      return;
    }

    this.bot.once('message', async (msg) => {
      try {
        const tokenAddress = msg.text.trim();
        
        if (!tokenAddress || !tokenAddress.startsWith('0x') || tokenAddress.length !== 42) {
          this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /addtoken');
          return;
        }

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
        const currentUser = this.userManager.getUser(chatId);
        if (!currentUser || !currentUser.contractAddress) {
          this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
          return;
        }

        this.web3Manager.setPrivateKey(currentUser.privateKey);
        this.web3Manager.setContractAddress(currentUser.contractAddress);
        
        this.bot.sendMessage(chatId, 'üîç –ü–æ–∏—Å–∫ LP —Ç–æ–∫–µ–Ω–∞...');
        const txHash = await this.web3Manager.addTokenAuto(tokenAddress);
        
        this.bot.sendMessage(chatId, 
          `‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º LP!\n\n` +
          `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
          `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}\n\n` +
          `üìä –û—Ç–∫—Ä—ã–≤–∞—é –≤–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏...`,
          { parse_mode: 'Markdown' }
        );

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        setTimeout(async () => {
          try {
            const tokens = await this.web3Manager.getAllTokens();
            
            if (tokens.length === 0) {
              this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—É—Å—Ç.');
              return;
            }

            let message = 'üìä –í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:\n\n';
            const keyboard = [];
            
            for (let i = 0; i < tokens.length; i++) {
              const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
              const shortAddress = `${tokens[i].slice(0, 6)}...${tokens[i].slice(-4)}`;
              const status = tokenInfo.isActive ? '‚úÖ' : '‚ùå';
              
              message += `${i + 1}. ${status} \`${shortAddress}\`\n`;
              
              keyboard.push([{
                text: `${i + 1}. ${shortAddress} ${status}`,
                callback_data: `select_token_${tokens[i]}`
              }]);
            }

            const replyMarkup = {
              inline_keyboard: keyboard
            };

            this.bot.sendMessage(chatId, message + '\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π:', { 
              parse_mode: 'Markdown',
              reply_markup: replyMarkup
            });
          } catch (error) {
            this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
          }
        }, 2000);
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error.message}`);
      }
    });
  }

  async handlePositions(chatId) {
    const user = this.userManager.getUser(chatId);
    
    if (!user || !user.contractAddress) {
      this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
      return;
    }

    try {
      this.web3Manager.setPrivateKey(user.privateKey);
      this.web3Manager.setContractAddress(user.contractAddress);
      
      const tokens = await this.web3Manager.getAllTokens();
      
      if (tokens.length === 0) {
        this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken');
        return;
      }

      let message = 'üìä –í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:\n\n';
      const keyboard = [];
      
      for (let i = 0; i < tokens.length; i++) {
        const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
        const shortAddress = `${tokens[i].slice(0, 6)}...${tokens[i].slice(-4)}`;
        const status = tokenInfo.isActive ? '‚úÖ' : '‚ùå';
        
        message += `${i + 1}. ${status} \`${shortAddress}\`\n`;
        
        keyboard.push([{
          text: `${i + 1}. ${shortAddress} ${status}`,
          callback_data: `select_token_${tokens[i]}`
        }]);
      }

      const replyMarkup = {
        inline_keyboard: keyboard
      };

      this.bot.sendMessage(chatId, message + '\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π:', { 
        parse_mode: 'Markdown',
        reply_markup: replyMarkup
      });
    } catch (error) {
      this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
    }
  }

  handleZapIn(chatId) {
    this.bot.once('message', async (msg) => {
      try {
        const [tokenAddress, amountStr] = msg.text.split(',').map(item => item.trim());
        const amount = parseFloat(amountStr);
        
        if (!tokenAddress || isNaN(amount) || amount <= 0) {
          this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /zapin');
          return;
        }

        const user = this.userManager.getUser(chatId);
        if (!user || !user.contractAddress) {
          this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
          return;
        }

        this.web3Manager.setPrivateKey(user.privateKey);
        this.web3Manager.setContractAddress(user.contractAddress);
        
        const txHash = await this.web3Manager.zapIn(tokenAddress, amount);
        
        this.bot.sendMessage(chatId, 
          `‚úÖ Zap-in –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
          `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
          `üí∞ –°—É–º–º–∞: ${amount} ETH\n` +
          `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ zap-in: ${error.message}`);
      }
    });
  }

  handleExit(chatId) {
    this.bot.once('message', async (msg) => {
      try {
        const tokenAddress = msg.text.trim();
        
        if (!tokenAddress) {
          this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /exit');
          return;
        }

        const user = this.userManager.getUser(chatId);
        if (!user || !user.contractAddress) {
          this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
          return;
        }

        this.web3Manager.setPrivateKey(user.privateKey);
        this.web3Manager.setContractAddress(user.contractAddress);
        
        const txHash = await this.web3Manager.exitAndSell(tokenAddress);
        
        this.bot.sendMessage(chatId, 
          `‚úÖ Exit-and-sell –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
          `üìç –¢–æ–∫–µ–Ω: \`${tokenAddress}\`\n` +
          `üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://etherscan.io/tx/${txHash}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ exit-and-sell: ${error.message}`);
      }
    });
  }

  async handleBalance(chatId) {
    const user = this.userManager.getUser(chatId);
    
    if (!user || !user.contractAddress) {
      this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
      return;
    }

    try {
      this.web3Manager.setPrivateKey(user.privateKey);
      this.web3Manager.setContractAddress(user.contractAddress);
      
      const walletBalance = await this.web3Manager.getWalletBalance();
      const contractEthBalance = await this.web3Manager.getEthBalance();
      const walletAddress = this.web3Manager.getWalletAddress();
      
      this.bot.sendMessage(chatId, 
        `üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n\n` +
        `üë§ –í–∞—à –∫–æ—à–µ–ª–µ–∫: \`${walletAddress}\`\n` +
        `üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletBalance} ETH\n` +
        `üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractEthBalance} ETH\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tokens –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ LP –±–∞–ª–∞–Ω—Å–æ–≤`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
    }
  }

  async handleTokens(chatId) {
    const user = this.userManager.getUser(chatId);
    
    if (!user || !user.contractAddress) {
      this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /deploy');
      return;
    }

    try {
      this.web3Manager.setPrivateKey(user.privateKey);
      this.web3Manager.setContractAddress(user.contractAddress);
      
      const tokens = await this.web3Manager.getAllTokens();
      
      if (tokens.length === 0) {
        this.bot.sendMessage(chatId, 'üìù –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /addtoken');
        return;
      }

      let message = 'ü™ô –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:\n\n';
      
      for (let i = 0; i < tokens.length; i++) {
        const tokenInfo = await this.web3Manager.getTokenInfo(tokens[i]);
        const lpBalance = await this.web3Manager.getLpBalance(tokens[i]);
        const tokenBalance = await this.web3Manager.getTokenBalance(tokens[i]);
        
        message += `${i + 1}. –¢–æ–∫–µ–Ω: \`${tokens[i]}\`\n`;
        message += `   LP: \`${tokenInfo.lpToken}\`\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${tokenInfo.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
        message += `   LP –±–∞–ª–∞–Ω—Å: ${lpBalance}\n`;
        message += `   –¢–æ–∫–µ–Ω –±–∞–ª–∞–Ω—Å: ${tokenBalance}\n\n`;
      }
      
      this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new TelegramBotManager();
