const readline = require('readline');
const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
const { getPrivateKeyInteractive } = require('./util-session');

const RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/x3twrYyq0NHf4x7oZSKKcQl9ehTwS4l9';

function prompt(question) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise((resolve) => {
    rl.question(question, (answer) => { rl.close(); resolve(answer.trim()); });
  });
}

// ABI –¥–ª—è UniswapV2Pair
const PAIR_ABI = [
  'function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)',
  'function token0() external view returns (address)',
  'function token1() external view returns (address)'
];

// ABI –¥–ª—è Zap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
function getZapABI() {
  const artifactPath = path.join(__dirname, '..', 'artifacts', 'contracts', 'Zap.sol', 'Zap.json');
  const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
  return artifact.abi;
}

function getTokenPriceInETH(reserve0, reserve1, token0, token1, tokenAddress) {
  let tokenReserve, ethReserve;
  
  if (token0.toLowerCase() === tokenAddress.toLowerCase()) {
    tokenReserve = reserve0;
    ethReserve = reserve1;
  } else if (token1.toLowerCase() === tokenAddress.toLowerCase()) {
    tokenReserve = reserve1;
    ethReserve = reserve0;
  } else {
    throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–µ');
  }
  
  return Number(ethReserve) / Number(tokenReserve);
}

async function getCurrentPrice(provider, pairAddress, tokenAddress) {
  const pair = new ethers.Contract(pairAddress, PAIR_ABI, provider);
  
  const [reserves, token0, token1] = await Promise.all([
    pair.getReserves(),
    pair.token0(),
    pair.token1()
  ]);
  
  return getTokenPriceInETH(reserves[0], reserves[1], token0, token1, tokenAddress);
}

async function executeZapIn(wallet, zapAddress, amountETH) {
  const zap = new ethers.Contract(zapAddress, getZapABI(), wallet);
  
  const amountWei = ethers.parseEther(amountETH);
  const amountOutMinToken = 0n;
  const amountTokenMin = 0n;
  const amountETHMin = 0n;
  
  const tx = await zap.zapIn(
    amountOutMinToken,
    amountTokenMin,
    amountETHMin,
    { value: amountWei }
  );
  
  console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è zapIn –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
  await tx.wait();
  console.log('–£–°–ü–ï–®–ù–û: zap-in –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

async function executeExit(wallet, zapAddress) {
  const zap = new ethers.Contract(zapAddress, getZapABI(), wallet);
  
  const amountTokenMin = 0n;
  const amountETHMin = 0n;
  const amountOutMinETH = 0n;
  
  const tx = await zap.exitAndSell(
    amountTokenMin,
    amountETHMin,
    amountOutMinETH
  );
  
  console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è exitAndSell –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
  await tx.wait();
  console.log('–£–°–ü–ï–®–ù–û: –≤—ã—Ö–æ–¥ –∏ –ø—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
}

async function main() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞');
  console.log('================================\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const token = await prompt('–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: ');
  const lpPair = await prompt('–ê–¥—Ä–µ—Å LP –ø–∞—Ä—ã (WETH/–¢–æ–∫–µ–Ω): ');
  const zapAddress = await prompt('–ê–¥—Ä–µ—Å Zap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ');
  
  const privateKey = await getPrivateKeyInteractive();
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log(`\nüë§ –ö–æ—à–µ–ª–µ–∫: ${wallet.address}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
  try {
    const currentPrice = await getCurrentPrice(provider, lpPair, token);
    console.log(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${currentPrice.toFixed(8)} ETH\n`);
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É\n');
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
  console.log('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞:');
  console.log('1. –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–∏ —Ü–µ–Ω–µ ‚â§ X)');
  console.log('2. –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–∏ —Ü–µ–Ω–µ ‚â• Y)');
  console.log('3. –û–±–∞ –æ—Ä–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∫–∞ + –ø—Ä–æ–¥–∞–∂–∞)');
  
  const orderType = await prompt('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ');
  
  let buyPrice = null, sellPrice = null, buyAmount = null;
  
  if (orderType === '1' || orderType === '3') {
    buyPrice = await prompt('–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (‚â§ X ETH): ');
    buyAmount = await prompt('–°—É–º–º–∞ ETH –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ');
  }
  
  if (orderType === '2' || orderType === '3') {
    sellPrice = await prompt('–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚â• Y ETH): ');
  }
  
  const checkInterval = await prompt('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ') || '5';
  const maxGasPrice = await prompt('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ gwei (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ') || '50';
  
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n');
  
  let lastAction = null;
  const cooldown = 15000; // 15 —Å–µ–∫ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  
  while (true) {
    try {
      const currentPrice = await getCurrentPrice(provider, lpPair, token);
      const now = Date.now();
      
      console.log(`üí∞ –¶–µ–Ω–∞: ${currentPrice.toFixed(8)} ETH (${new Date().toLocaleTimeString()})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
      if (lastAction && (now - lastAction) < cooldown) {
        console.log(`‚è≥ Cooldown: ${Math.ceil((cooldown - (now - lastAction)) / 1000)}—Å`);
        await new Promise(resolve => setTimeout(resolve, parseInt(checkInterval) * 1000));
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞
      const feeData = await provider.getFeeData();
      const gasPriceGwei = Number(ethers.formatUnits(feeData.gasPrice, 'gwei'));
      
      if (gasPriceGwei > parseFloat(maxGasPrice)) {
        console.log(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–π –≥–∞–∑: ${gasPriceGwei.toFixed(2)} gwei (–ª–∏–º–∏—Ç: ${maxGasPrice} gwei)`);
        await new Promise(resolve => setTimeout(resolve, parseInt(checkInterval) * 1000));
        continue;
      }
      
      // –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
      if (buyPrice && currentPrice <= parseFloat(buyPrice)) {
        console.log(`üü¢ –¶–µ–Ω–∞ ${currentPrice.toFixed(8)} <= ${buyPrice} - –ü–û–ö–£–ü–ö–ê!`);
        await executeZapIn(wallet, zapAddress, buyAmount);
        lastAction = now;
      } else if (sellPrice && currentPrice >= parseFloat(sellPrice)) {
        console.log(`üî¥ –¶–µ–Ω–∞ ${currentPrice.toFixed(8)} >= ${sellPrice} - –ü–†–û–î–ê–ñ–ê!`);
        await executeExit(wallet, zapAddress);
        lastAction = now;
      } else {
        console.log(`‚ö™ –û–∂–∏–¥–∞–Ω–∏–µ...`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, parseInt(checkInterval) * 1000));
  }
}

main().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});











