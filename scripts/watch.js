const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
const { getPrivateKeyInteractive } = require('./util-session');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø
const CONFIG = {
  // –ê–¥—Ä–µ—Å–∞
  token: '0x...', // –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
  lpPair: '0x...', // –ê–¥—Ä–µ—Å LP –ø–∞—Ä—ã (–¥–ª—è —á—Ç–µ–Ω–∏—è —Ü–µ–Ω—ã)
  zapAddress: '0x...', // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ Zap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  router: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // UniswapV2 Router
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
  buyPrice: '0.0001', // –ü–æ–∫—É–ø–∞—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ <= X ETH
  sellPrice: '0.0002', // –ü—Ä–æ–¥–∞–≤–∞—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ >= Y ETH
  buyAmount: '0.01', // –°–∫–æ–ª—å–∫–æ ETH —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  checkInterval: 5000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º—Å (5 —Å–µ–∫)
  maxGasPrice: '50', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ gwei
};

const RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/x3twrYyq0NHf4x7oZSKKcQl9ehTwS4l9';

// ABI –¥–ª—è UniswapV2Pair
const PAIR_ABI = [
  'function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)',
  'function token0() external view returns (address)',
  'function token1() external view returns (address)'
];

// ABI –¥–ª—è Zap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
function getZapABI() {
  const artifactPath = path.join(__dirname, '..', 'artifacts', 'contracts', 'Zap.sol', 'Zap.json');
  const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
  return artifact.abi;
}

function getTokenPriceInETH(reserve0, reserve1, token0, token1, tokenAddress) {
  // WETH –∞–¥—Ä–µ—Å –Ω–∞ mainnet
  const WETH = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';
  
  let tokenReserve, ethReserve;
  
  if (token0.toLowerCase() === tokenAddress.toLowerCase()) {
    tokenReserve = reserve0;
    ethReserve = reserve1;
  } else if (token1.toLowerCase() === tokenAddress.toLowerCase()) {
    tokenReserve = reserve1;
    ethReserve = reserve0;
  } else {
    throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–µ');
  }
  
  // –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –≤ ETH = ETH —Ä–µ–∑–µ—Ä–≤ / —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤
  return Number(ethReserve) / Number(tokenReserve);
}

async function getCurrentPrice(provider, pairAddress, tokenAddress) {
  const pair = new ethers.Contract(pairAddress, PAIR_ABI, provider);
  
  const [reserves, token0, token1] = await Promise.all([
    pair.getReserves(),
    pair.token0(),
    pair.token1()
  ]);
  
  return getTokenPriceInETH(reserves[0], reserves[1], token0, token1, tokenAddress);
}

async function executeZapIn(wallet, zapAddress, amountETH) {
  const zap = new ethers.Contract(zapAddress, getZapABI(), wallet);
  
  const amountWei = ethers.parseEther(amountETH);
  const amountOutMinToken = 0n;
  const amountTokenMin = 0n;
  const amountETHMin = 0n;
  
  const tx = await zap.zapIn(
    amountOutMinToken,
    amountTokenMin,
    amountETHMin,
    { value: amountWei }
  );
  
  console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è zapIn –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
  await tx.wait();
  console.log('–£–°–ü–ï–®–ù–û: zap-in –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

async function executeExit(wallet, zapAddress) {
  const zap = new ethers.Contract(zapAddress, getZapABI(), wallet);
  
  const amountTokenMin = 0n;
  const amountETHMin = 0n;
  const amountOutMinETH = 0n;
  
  const tx = await zap.exitAndSell(
    amountTokenMin,
    amountETHMin,
    amountOutMinETH
  );
  
  console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è exitAndSell –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
  await tx.wait();
  console.log('–£–°–ü–ï–®–ù–û: –≤—ã—Ö–æ–¥ –∏ –ø—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
}

async function checkGasPrice(provider) {
  const feeData = await provider.getFeeData();
  const gasPrice = feeData.gasPrice;
  const gasPriceGwei = Number(ethers.formatUnits(gasPrice, 'gwei'));
  
  if (gasPriceGwei > parseFloat(CONFIG.maxGasPrice)) {
    console.log(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: ${gasPriceGwei.toFixed(2)} gwei (–ª–∏–º–∏—Ç: ${CONFIG.maxGasPrice} gwei)`);
    return false;
  }
  return true;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞...');
  console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   –¢–æ–∫–µ–Ω: ${CONFIG.token}`);
  console.log(`   LP –ø–∞—Ä–∞: ${CONFIG.lpPair}`);
  console.log(`   Zap –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${CONFIG.zapAddress}`);
  console.log(`   –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ —Ü–µ–Ω–µ <= ${CONFIG.buyPrice} ETH`);
  console.log(`   –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —Ü–µ–Ω–µ >= ${CONFIG.sellPrice} ETH`);
  console.log(`   –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ${CONFIG.buyAmount} ETH`);
  console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CONFIG.checkInterval}–º—Å`);
  console.log('');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (CONFIG.token === '0x...' || CONFIG.lpPair === '0x...' || CONFIG.zapAddress === '0x...') {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ CONFIG');
    process.exit(1);
  }
  
  const privateKey = await getPrivateKeyInteractive();
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log(`üë§ –ö–æ—à–µ–ª–µ–∫: ${wallet.address}`);
  console.log('‚è∞ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n');
  
  let lastAction = null;
  const cooldown = 15000; // 15 —Å–µ–∫ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  
  while (true) {
    try {
      const currentPrice = await getCurrentPrice(provider, CONFIG.lpPair, CONFIG.token);
      const now = Date.now();
      
      console.log(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(8)} ETH (${new Date().toLocaleTimeString()})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
      if (lastAction && (now - lastAction) < cooldown) {
        console.log(`‚è≥ Cooldown: ${Math.ceil((cooldown - (now - lastAction)) / 1000)}—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è`);
        await new Promise(resolve => setTimeout(resolve, CONFIG.checkInterval));
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞
      const gasOk = await checkGasPrice(provider);
      if (!gasOk) {
        console.log('‚è≥ –ñ–¥–µ–º —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞...');
        await new Promise(resolve => setTimeout(resolve, CONFIG.checkInterval));
        continue;
      }
      
      // –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
      if (currentPrice <= parseFloat(CONFIG.buyPrice)) {
        console.log(`üü¢ –¶–µ–Ω–∞ ${currentPrice.toFixed(8)} <= ${CONFIG.buyPrice} - –í–´–ü–û–õ–ù–Ø–Æ –ü–û–ö–£–ü–ö–£`);
        await executeZapIn(wallet, CONFIG.zapAddress, CONFIG.buyAmount);
        lastAction = now;
      } else if (currentPrice >= parseFloat(CONFIG.sellPrice)) {
        console.log(`üî¥ –¶–µ–Ω–∞ ${currentPrice.toFixed(8)} >= ${CONFIG.sellPrice} - –í–´–ü–û–õ–ù–Ø–Æ –ü–†–û–î–ê–ñ–£`);
        await executeExit(wallet, CONFIG.zapAddress);
        lastAction = now;
      } else {
        console.log(`‚ö™ –¶–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${CONFIG.buyPrice} - ${CONFIG.sellPrice} ETH`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, CONFIG.checkInterval));
  }
}

main().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
